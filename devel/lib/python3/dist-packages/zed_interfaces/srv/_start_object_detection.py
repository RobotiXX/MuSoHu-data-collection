# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zed_interfaces/start_object_detectionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class start_object_detectionRequest(genpy.Message):
  _md5sum = "237986910a8e55bd46f1c5ba0541a75b"
  _type = "zed_interfaces/start_object_detectionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Starts object detection, if not automatically enabled with the parameter `object_detection/od_enabled`

# OD Model
# '0': MULTI_CLASS_BOX - '1': MULTI_CLASS_BOX_ACCURATE - '2': HUMAN_BODY_FAST - '3': HUMAN_BODY_ACCURATE
int8 model

# Minimum Confidence level
float32 confidence

# MAx detection range
float32 max_range

# Object tracking
bool tracking

# Body Fitting
bool sk_body_fitting

# Detect people (valid for Multi-class model)
bool mc_people

# Detect vehicles
bool mc_vehicles

# Detect bags
bool mc_bag

# Detect animals
bool mc_animal

# Detect electronic devices
bool mc_electronics

# Detect fruits and vegetables
bool mc_fruit_vegetable

# Detect sport objects
bool mc_sport

"""
  __slots__ = ['model','confidence','max_range','tracking','sk_body_fitting','mc_people','mc_vehicles','mc_bag','mc_animal','mc_electronics','mc_fruit_vegetable','mc_sport']
  _slot_types = ['int8','float32','float32','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       model,confidence,max_range,tracking,sk_body_fitting,mc_people,mc_vehicles,mc_bag,mc_animal,mc_electronics,mc_fruit_vegetable,mc_sport

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(start_object_detectionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.model is None:
        self.model = 0
      if self.confidence is None:
        self.confidence = 0.
      if self.max_range is None:
        self.max_range = 0.
      if self.tracking is None:
        self.tracking = False
      if self.sk_body_fitting is None:
        self.sk_body_fitting = False
      if self.mc_people is None:
        self.mc_people = False
      if self.mc_vehicles is None:
        self.mc_vehicles = False
      if self.mc_bag is None:
        self.mc_bag = False
      if self.mc_animal is None:
        self.mc_animal = False
      if self.mc_electronics is None:
        self.mc_electronics = False
      if self.mc_fruit_vegetable is None:
        self.mc_fruit_vegetable = False
      if self.mc_sport is None:
        self.mc_sport = False
    else:
      self.model = 0
      self.confidence = 0.
      self.max_range = 0.
      self.tracking = False
      self.sk_body_fitting = False
      self.mc_people = False
      self.mc_vehicles = False
      self.mc_bag = False
      self.mc_animal = False
      self.mc_electronics = False
      self.mc_fruit_vegetable = False
      self.mc_sport = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_b2f9B().pack(_x.model, _x.confidence, _x.max_range, _x.tracking, _x.sk_body_fitting, _x.mc_people, _x.mc_vehicles, _x.mc_bag, _x.mc_animal, _x.mc_electronics, _x.mc_fruit_vegetable, _x.mc_sport))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.model, _x.confidence, _x.max_range, _x.tracking, _x.sk_body_fitting, _x.mc_people, _x.mc_vehicles, _x.mc_bag, _x.mc_animal, _x.mc_electronics, _x.mc_fruit_vegetable, _x.mc_sport,) = _get_struct_b2f9B().unpack(str[start:end])
      self.tracking = bool(self.tracking)
      self.sk_body_fitting = bool(self.sk_body_fitting)
      self.mc_people = bool(self.mc_people)
      self.mc_vehicles = bool(self.mc_vehicles)
      self.mc_bag = bool(self.mc_bag)
      self.mc_animal = bool(self.mc_animal)
      self.mc_electronics = bool(self.mc_electronics)
      self.mc_fruit_vegetable = bool(self.mc_fruit_vegetable)
      self.mc_sport = bool(self.mc_sport)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_b2f9B().pack(_x.model, _x.confidence, _x.max_range, _x.tracking, _x.sk_body_fitting, _x.mc_people, _x.mc_vehicles, _x.mc_bag, _x.mc_animal, _x.mc_electronics, _x.mc_fruit_vegetable, _x.mc_sport))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.model, _x.confidence, _x.max_range, _x.tracking, _x.sk_body_fitting, _x.mc_people, _x.mc_vehicles, _x.mc_bag, _x.mc_animal, _x.mc_electronics, _x.mc_fruit_vegetable, _x.mc_sport,) = _get_struct_b2f9B().unpack(str[start:end])
      self.tracking = bool(self.tracking)
      self.sk_body_fitting = bool(self.sk_body_fitting)
      self.mc_people = bool(self.mc_people)
      self.mc_vehicles = bool(self.mc_vehicles)
      self.mc_bag = bool(self.mc_bag)
      self.mc_animal = bool(self.mc_animal)
      self.mc_electronics = bool(self.mc_electronics)
      self.mc_fruit_vegetable = bool(self.mc_fruit_vegetable)
      self.mc_sport = bool(self.mc_sport)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b2f9B = None
def _get_struct_b2f9B():
    global _struct_b2f9B
    if _struct_b2f9B is None:
        _struct_b2f9B = struct.Struct("<b2f9B")
    return _struct_b2f9B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zed_interfaces/start_object_detectionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class start_object_detectionResponse(genpy.Message):
  _md5sum = "89bb254424e4cffedbf494e7b0ddbfea"
  _type = "zed_interfaces/start_object_detectionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool done

"""
  __slots__ = ['done']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       done

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(start_object_detectionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.done is None:
        self.done = False
    else:
      self.done = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.done
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.done,) = _get_struct_B().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.done
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.done,) = _get_struct_B().unpack(str[start:end])
      self.done = bool(self.done)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class start_object_detection(object):
  _type          = 'zed_interfaces/start_object_detection'
  _md5sum = '9756600455daaeb06ade1a46c6073504'
  _request_class  = start_object_detectionRequest
  _response_class = start_object_detectionResponse

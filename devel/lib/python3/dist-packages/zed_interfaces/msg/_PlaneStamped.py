# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zed_interfaces/PlaneStamped.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import shape_msgs.msg
import std_msgs.msg

class PlaneStamped(genpy.Message):
  _md5sum = "1ae4cda68097919aea83add5dc8f86c1"
  _type = "zed_interfaces/PlaneStamped"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# Standard Header
std_msgs/Header header

# Mesh of the place
shape_msgs/Mesh mesh

# Representation of a plane, using the plane equation ax + by + cz + d = 0
shape_msgs/Plane coefficients

# Normal vector
geometry_msgs/Point32 normal

# Center point 
geometry_msgs/Point32 center

# Plane pose relative to the global reference frame
geometry_msgs/Transform pose

# Width and height of the bounding rectangle around the plane contours
float32[2] extents

# The polygon bounds of the plane
geometry_msgs/Polygon bounds


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: shape_msgs/Mesh
# Definition of a mesh

# list of triangles; the index values refer to positions in vertices[]
MeshTriangle[] triangles

# the actual vertices that make up the mesh
geometry_msgs/Point[] vertices

================================================================================
MSG: shape_msgs/MeshTriangle
# Definition of a triangle's vertices
uint32[3] vertex_indices

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: shape_msgs/Plane
# Representation of a plane, using the plane equation ax + by + cz + d = 0

# a := coef[0]
# b := coef[1]
# c := coef[2]
# d := coef[3]

float64[4] coef

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Polygon
#A specification of a polygon where the first and last points are assumed to be connected
Point32[] points
"""
  __slots__ = ['header','mesh','coefficients','normal','center','pose','extents','bounds']
  _slot_types = ['std_msgs/Header','shape_msgs/Mesh','shape_msgs/Plane','geometry_msgs/Point32','geometry_msgs/Point32','geometry_msgs/Transform','float32[2]','geometry_msgs/Polygon']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,mesh,coefficients,normal,center,pose,extents,bounds

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlaneStamped, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh is None:
        self.mesh = shape_msgs.msg.Mesh()
      if self.coefficients is None:
        self.coefficients = shape_msgs.msg.Plane()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Point32()
      if self.center is None:
        self.center = geometry_msgs.msg.Point32()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Transform()
      if self.extents is None:
        self.extents = [0.] * 2
      if self.bounds is None:
        self.bounds = geometry_msgs.msg.Polygon()
    else:
      self.header = std_msgs.msg.Header()
      self.mesh = shape_msgs.msg.Mesh()
      self.coefficients = shape_msgs.msg.Plane()
      self.normal = geometry_msgs.msg.Point32()
      self.center = geometry_msgs.msg.Point32()
      self.pose = geometry_msgs.msg.Transform()
      self.extents = [0.] * 2
      self.bounds = geometry_msgs.msg.Polygon()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.mesh.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.triangles:
        buff.write(_get_struct_3I().pack(*val1.vertex_indices))
      length = len(self.mesh.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.vertices:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(_get_struct_4d().pack(*self.coefficients.coef))
      _x = self
      buff.write(_get_struct_6f7d().pack(_x.normal.x, _x.normal.y, _x.normal.z, _x.center.x, _x.center.y, _x.center.z, _x.pose.translation.x, _x.pose.translation.y, _x.pose.translation.z, _x.pose.rotation.x, _x.pose.rotation.y, _x.pose.rotation.z, _x.pose.rotation.w))
      buff.write(_get_struct_2f().pack(*self.extents))
      length = len(self.bounds.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounds.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh is None:
        self.mesh = shape_msgs.msg.Mesh()
      if self.coefficients is None:
        self.coefficients = shape_msgs.msg.Plane()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Point32()
      if self.center is None:
        self.center = geometry_msgs.msg.Point32()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Transform()
      if self.bounds is None:
        self.bounds = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = _get_struct_3I().unpack(str[start:end])
        self.mesh.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.mesh.vertices.append(val1)
      start = end
      end += 32
      self.coefficients.coef = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 80
      (_x.normal.x, _x.normal.y, _x.normal.z, _x.center.x, _x.center.y, _x.center.z, _x.pose.translation.x, _x.pose.translation.y, _x.pose.translation.z, _x.pose.rotation.x, _x.pose.rotation.y, _x.pose.rotation.z, _x.pose.rotation.w,) = _get_struct_6f7d().unpack(str[start:end])
      start = end
      end += 8
      self.extents = _get_struct_2f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounds.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.bounds.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.mesh.triangles)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.triangles:
        buff.write(val1.vertex_indices.tostring())
      length = len(self.mesh.vertices)
      buff.write(_struct_I.pack(length))
      for val1 in self.mesh.vertices:
        _x = val1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      buff.write(self.coefficients.coef.tostring())
      _x = self
      buff.write(_get_struct_6f7d().pack(_x.normal.x, _x.normal.y, _x.normal.z, _x.center.x, _x.center.y, _x.center.z, _x.pose.translation.x, _x.pose.translation.y, _x.pose.translation.z, _x.pose.rotation.x, _x.pose.rotation.y, _x.pose.rotation.z, _x.pose.rotation.w))
      buff.write(self.extents.tostring())
      length = len(self.bounds.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.bounds.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.mesh is None:
        self.mesh = shape_msgs.msg.Mesh()
      if self.coefficients is None:
        self.coefficients = shape_msgs.msg.Plane()
      if self.normal is None:
        self.normal = geometry_msgs.msg.Point32()
      if self.center is None:
        self.center = geometry_msgs.msg.Point32()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Transform()
      if self.bounds is None:
        self.bounds = geometry_msgs.msg.Polygon()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.triangles = []
      for i in range(0, length):
        val1 = shape_msgs.msg.MeshTriangle()
        start = end
        end += 12
        val1.vertex_indices = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=3)
        self.mesh.triangles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.mesh.vertices = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point()
        _x = val1
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.mesh.vertices.append(val1)
      start = end
      end += 32
      self.coefficients.coef = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 80
      (_x.normal.x, _x.normal.y, _x.normal.z, _x.center.x, _x.center.y, _x.center.z, _x.pose.translation.x, _x.pose.translation.y, _x.pose.translation.z, _x.pose.rotation.x, _x.pose.rotation.y, _x.pose.rotation.z, _x.pose.rotation.w,) = _get_struct_6f7d().unpack(str[start:end])
      start = end
      end += 8
      self.extents = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=2)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.bounds.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.bounds.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_6f7d = None
def _get_struct_6f7d():
    global _struct_6f7d
    if _struct_6f7d is None:
        _struct_6f7d = struct.Struct("<6f7d")
    return _struct_6f7d

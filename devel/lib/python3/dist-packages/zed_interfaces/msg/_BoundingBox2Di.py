# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from zed_interfaces/BoundingBox2Di.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import zed_interfaces.msg

class BoundingBox2Di(genpy.Message):
  _md5sum = "48f8f53e85eafba49fb9648f6258d114"
  _type = "zed_interfaces/BoundingBox2Di"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#      0 ------- 1
#      |         |
#      |         |
#      |         |
#      3 ------- 2
zed_interfaces/Keypoint2Di[4] corners

================================================================================
MSG: zed_interfaces/Keypoint2Di
uint32[2] kp
"""
  __slots__ = ['corners']
  _slot_types = ['zed_interfaces/Keypoint2Di[4]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       corners

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BoundingBox2Di, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.corners is None:
        self.corners = [zed_interfaces.msg.Keypoint2Di() for _ in range(4)]
    else:
      self.corners = [zed_interfaces.msg.Keypoint2Di() for _ in range(4)]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      if len(self.corners) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.corners), 'self.corners')))
      for val1 in self.corners:
        buff.write(_get_struct_2I().pack(*val1.kp))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.corners is None:
        self.corners = None
      end = 0
      self.corners = []
      for i in range(0, 4):
        val1 = zed_interfaces.msg.Keypoint2Di()
        start = end
        end += 8
        val1.kp = _get_struct_2I().unpack(str[start:end])
        self.corners.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      if len(self.corners) != 4:
        self._check_types(ValueError("Expecting %s items but found %s when writing '%s'" % (4, len(self.corners), 'self.corners')))
      for val1 in self.corners:
        buff.write(val1.kp.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.corners is None:
        self.corners = None
      end = 0
      self.corners = []
      for i in range(0, 4):
        val1 = zed_interfaces.msg.Keypoint2Di()
        start = end
        end += 8
        val1.kp = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
        self.corners.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I

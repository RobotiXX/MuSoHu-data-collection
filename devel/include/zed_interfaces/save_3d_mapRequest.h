// Generated by gencpp from file zed_interfaces/save_3d_mapRequest.msg
// DO NOT EDIT!


#ifndef ZED_INTERFACES_MESSAGE_SAVE_3D_MAPREQUEST_H
#define ZED_INTERFACES_MESSAGE_SAVE_3D_MAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zed_interfaces
{
template <class ContainerAllocator>
struct save_3d_mapRequest_
{
  typedef save_3d_mapRequest_<ContainerAllocator> Type;

  save_3d_mapRequest_()
    : map_filename()
    , file_format(0)  {
    }
  save_3d_mapRequest_(const ContainerAllocator& _alloc)
    : map_filename(_alloc)
    , file_format(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _map_filename_type;
  _map_filename_type map_filename;

   typedef uint8_t _file_format_type;
  _file_format_type file_format;





  typedef boost::shared_ptr< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct save_3d_mapRequest_

typedef ::zed_interfaces::save_3d_mapRequest_<std::allocator<void> > save_3d_mapRequest;

typedef boost::shared_ptr< ::zed_interfaces::save_3d_mapRequest > save_3d_mapRequestPtr;
typedef boost::shared_ptr< ::zed_interfaces::save_3d_mapRequest const> save_3d_mapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator1> & lhs, const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.map_filename == rhs.map_filename &&
    lhs.file_format == rhs.file_format;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator1> & lhs, const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zed_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56677e0c5e358a82a455f7d0d9b27a0e";
  }

  static const char* value(const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56677e0c5e358a82ULL;
  static const uint64_t static_value2 = 0xa455f7d0d9b27a0eULL;
};

template<class ContainerAllocator>
struct DataType< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zed_interfaces/save_3d_mapRequest";
  }

  static const char* value(const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Filename (with path and externsion) of the map file\n"
"string map_filename \n"
"\n"
"# File format [0: PLY, 1: PLY_BIN, 2: OBJ]\n"
"uint8 file_format\n"
;
  }

  static const char* value(const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.map_filename);
      stream.next(m.file_format);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct save_3d_mapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zed_interfaces::save_3d_mapRequest_<ContainerAllocator>& v)
  {
    s << indent << "map_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.map_filename);
    s << indent << "file_format: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.file_format);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZED_INTERFACES_MESSAGE_SAVE_3D_MAPREQUEST_H

// Generated by gencpp from file zed_interfaces/save_area_memoryRequest.msg
// DO NOT EDIT!


#ifndef ZED_INTERFACES_MESSAGE_SAVE_AREA_MEMORYREQUEST_H
#define ZED_INTERFACES_MESSAGE_SAVE_AREA_MEMORYREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zed_interfaces
{
template <class ContainerAllocator>
struct save_area_memoryRequest_
{
  typedef save_area_memoryRequest_<ContainerAllocator> Type;

  save_area_memoryRequest_()
    : area_memory_filename()  {
    }
  save_area_memoryRequest_(const ContainerAllocator& _alloc)
    : area_memory_filename(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _area_memory_filename_type;
  _area_memory_filename_type area_memory_filename;





  typedef boost::shared_ptr< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> const> ConstPtr;

}; // struct save_area_memoryRequest_

typedef ::zed_interfaces::save_area_memoryRequest_<std::allocator<void> > save_area_memoryRequest;

typedef boost::shared_ptr< ::zed_interfaces::save_area_memoryRequest > save_area_memoryRequestPtr;
typedef boost::shared_ptr< ::zed_interfaces::save_area_memoryRequest const> save_area_memoryRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator1> & lhs, const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator2> & rhs)
{
  return lhs.area_memory_filename == rhs.area_memory_filename;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator1> & lhs, const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zed_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ab0f15ea60791be9468710556673c3a9";
  }

  static const char* value(const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xab0f15ea60791be9ULL;
  static const uint64_t static_value2 = 0x468710556673c3a9ULL;
};

template<class ContainerAllocator>
struct DataType< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zed_interfaces/save_area_memoryRequest";
  }

  static const char* value(const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Filename (with path and externsion) of the area memory file. Existing files will be updated\n"
"string area_memory_filename \n"
;
  }

  static const char* value(const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.area_memory_filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct save_area_memoryRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zed_interfaces::save_area_memoryRequest_<ContainerAllocator>& v)
  {
    s << indent << "area_memory_filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.area_memory_filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZED_INTERFACES_MESSAGE_SAVE_AREA_MEMORYREQUEST_H
